FORMAT: 1A
HOST: http://class-path-auth.herokuapp.com/

# Class Path Auth

Os serviços do sistema Class Path se dividem em 3, sendo um para criação e resposta de conteúdos, outro pra trabalhar a geolocalização e distância entre dois pontos, e um terceiro responsável por retornar as informações de usuários e login.

Eles estão hospedados no heroku com os seguintes domínios:

**Class Path Auth**:

`http://class-path-auth.herokuapp.com/`

**Class Path Location**:

`http://class-path-location.herokuapp.com/`

**Class Path Content**:

`http://class-path-content.herokuapp.com/`

Essa documentação trata-se exclusivamente do serviço de usuários, `class-path-auth`.


## Institutions Collection [/institutions/]
### Criar Instituição de Ensino [POST]

O primeiro passo para iniciar um workspace é criar uma instituição de ensino que irá abrigar professsores, turmas, cursos e matérias.
Para criar uma instituição, por enquanto, precisa ser usuario root, mas futuramente vai existir um ou mais usuários superusuários responsáveis por cada instituição.

+ Request (application/json)
    + Headers

            Authorization: Token <user token>

    + Body

            {
            "name": "UESPI",
            "description": "Faculdade Estadual do Piauí"
        }

+ Response 201 (application/json)

    + Headers

            Authorization: Token <user token>

    + Body

            {
                "id": 1,
                "name": "UESPI",
                "description": "Faculdade Estadual do Piauí",
                "created_at": "2019-11-25T15:36:07.007243Z",
                "modified_at": "2019-11-25T15:36:07.007305Z"
            }

## Program Collection [/programs/]
### Criar Curso / Serie [POST]
Após a criação da instituição, é possivel criar e associar um curso a ela, para isso só basta enviar um post para o path `/programs/` com as informações do curso ou série e o id da instituição.

+ Request (application/json)
    + Headers

            Authorization: Token <user token>

    + Body

        {
            "name": "Ciencia da Computação",
            "description": "Curso de Ciencias da Computação",
            "institution": 1
        }


+ Response 200 (application/json)

    + Body

        {
            "id": 1,
            "name": "Ciencia da Computação",
            "description": "Curso de Ciencias da Computação",
            "institution": 1,
            "created_at": "2019-11-25T15:45:27.515499Z",
            "modified_at": "2019-11-25T15:45:27.515534Z"
        }

## Teacher Collection [/users/]
Existem 4 tipos de usuários, o usuário root que tem total acesso sobre a aplicação, o superusuário que tem acesso administrativo sobre uma instituição, o professor que é capaz de lecionar aulas e compor atividades e o aluno que pode fazer parte de turmas e responder atividades.

Cada usuário só pode ter uma das respectivas permissões como tipo, existe uma validação que retorna uma erro caso alguma requisição desobedeça essa regra.

Os exemplos a seguir tratam-se da criação de dois desses tipos:

### Criar Usuario para o Professor [POST]
+ Request (application/json)
    + Headers

            Authorization: Token <user token>

    + Body

        {
            "is_teacher": true,
            "password": "abc12345",
            "confirm_password": "abc12345",
            "registration_number": "123456",
            "email": "teacher@email.com"
        }


+ Response 200 (application/json)

    + Body

        {
            "id": 1,
            "is_teacher": true,
            "registration_number": "12345",
            "email": "teacher@gmail.com",
            "token": "c435918c4c4ae4342dc791aa55d2ca4dbdb6ab48",
        }


### Criar Usuario para o Aluno [POST]
+ Request (application/json)
    + Headers

            Authorization: Token <user token>

    + Body

        {
            "is_student": true,
            "password": "abc12345",
            "confirm_password": "abc12345",
            "registration_number": "654321",
            "email": "aluno@email.com"
        }


+ Response 200 (application/json)

    + Body

        {
            "id": 2,
            "registration_number": "654321",
            "email": "aluno@email.com",
            "token": "c435918c4c4ae4342dc791aa55d2ca4dbdb6ab48",
            "is_student": true
        }

## Login [/login/]

Por se tratar de microserviços e para facilitar a autenticação pelo app invetor, os tokens de cada usuário são estáticos,
então para efetuar o login é necessário apenas enviar os dados corretos: username (corresponde ao register_number do usuario) e senha.

Esse endpoint retorna um token que deve ser guardado no storage do aplicativo e enviado no cabeçalho de cada requisição seguindo a regra:

`Authorization: Token <user_token>`

Exemplo:

`Authorization: Token 27a762949819620815770cdb696b3118c536fcc3`

Tendo isso como parâmetro, para fazer o logout da aplicação, o client não precisa fazer nenhum requisição, apenas excluir o Token do storage.
### Obter o Token de autenticação (Login) [POST]
+ Request (application/json)

    + Body

        {
            "username": "123456",
            "password": "abc12345",
        }


+ Response 200 (application/json)

    + Body

        {
            "token": "27a762949819620815770cdb696b3118c536fcc3"
        }

## Informações Pessoais [/my-account/]
### Obter informações do usuario autenticado.[GET]
+ Request (application/json)
    + Headers
            Authorization Token 27a762949819620815770cdb696b3118c536fcc3

+ Response 200 (application/json)

    + Body

        {
            "addresses": [],
            "email": "admin@admin.com",
            "id": 1,
            "is_student": false,
            "is_teacher": false,
            "profile": {
                "cpf": null,
                "created_at": "2019-11-24T19:58:30.094078Z",
                "description": null,
                "full_name": null,
                "id": 1,
                "institution": 2,
                "modified_at": "2019-11-25T15:36:07.026132Z"
            },
            "registration_number": "123456",
            "token": "27a762949819620815770cdb696b3118c536fcc3"
        }


## Aluno -  Informações da Turma [/my-class/]
Esse endpoint é responsável por retornar as informações da Turma onde o usuario autenticado está matriculado.
***Somente usuario do tipo aluno podem acessar.***
### Obter informações da Turma do Estudante autenticado.[GET]
+ Request (application/json)
    + Headers
        Authorization Token 19405d402e37d8ca3b93d0bfdc7478e99665261a

+ Response 200 (application/json)

    + Body

        {
            "created_at": "2019-11-24T20:45:43.785794Z",
            "description": "Class a of Ciencias da Computação course",
            "id": 1,
            "modified_at": "2019-11-24T20:45:43.785826Z",
            "name": "Class A",
            "program": 1
        }

## Professor - Informações das Turmas [/my-classes/]
Esse endpoint é responsável por retornar uma lista com todas as Turmas onde o professor autenticado leciona.
***Somente usuario do tipo professor podem acessar.***
### Lista de turmas que o professor autenticado leciona.[GET]
+ Request (application/json)
    + Headers
        Authorization Token 19405d402e37d8ca3b93d0bfdc7478e99665261a

+ Response 200 (application/json)

    + Body

        [
            {
                "created_at": "2019-11-24T20:45:43.785794Z",
                "description": "Class a of Ciencias da Computação course",
                "id": 1,
                "modified_at": "2019-11-24T20:45:43.785826Z",
                "name": "Class A",
                "program": 1
            }
        ]

## Professor - Lista de Programas [/my-programs/]
Esse endpoint é responsável por retornar os cursos da Instituição onde o professor autenticado leciona.
***Somente usuario do tipo professor podem acessar.***
### Obter lista de programas do professor autenticado.[GET]
+ Request (application/json)
    + Headers
        Authorization Token 19405d402e37d8ca3b93d0bfdc7478e99665261a

+ Response 200 (application/json)

    + Body

        [
            {
                "classes": [
                    {
                        "created_at": "2019-11-24T20:45:43.785794Z",
                        "description": "Class a of Ciencias da Computação course",
                        "id": 1,
                        "modified_at": "2019-11-24T20:45:43.785826Z",
                        "name": "Class A",
                        "program": 1
                    }
                ],
                "courses": [
                    {
                        "class_id": 1,
                        "created_at": "2019-11-24T20:51:09.178547Z",
                        "description": null,
                        "id": 1,
                        "modified_at": "2019-11-24T20:51:09.178578Z",
                        "name": "TCC II",
                        "program": 1,
                        "teacher": 1
                    }
                ],
                "created_at": "2019-11-24T20:44:33.272621Z",
                "description": "Curso de Ciencias da Computação",
                "id": 1,
                "institution": 1,
                "modified_at": "2019-11-24T20:44:33.272666Z",
                "name": "Ciencia da Computação"
            }
        ]

## Informações da Instituição [/my-institution/]
Esse endpoint é responsável por retornar as informações da Instituição onde o usuario autenticado está matriculado.
### Obter informações da Instituição do usuário autenticado [GET]
+ Request (application/json)
    + Headers
        Authorization Token 19405d402e37d8ca3b93d0bfdc7478e99665261a

+ Response 200 (application/json)

    + Body

        {
            "created_at": "2019-11-24T20:43:58.355574Z",
            "description": "Faculdade Estadual do Piauí",
            "id": 1,
            "modified_at": "2019-11-24T20:43:58.355604Z",
            "name": "UESPI"
        }

## Lista de Matérias [/my-courses/]
Esse endpoint é responsável por retornar todas as matérias de um usuário autenticado.

- Se o usuário, for do tipo Professor, o endpoint retornará todas as matérias que o professor autenticado leciona.
- Se o usuário, for do tipo Estudante, o endpoint retornará todas as matérias que o aluno está matriculado.

### Obter lista de Materias do usuário autenticado [GET]
+ Request (application/json)
    + Headers
        Authorization Token 19405d402e37d8ca3b93d0bfdc7478e99665261a

+ Response 200 (application/json)

    + Body

        [
            {
                "class_id": 1,
                "created_at": "2019-11-24T20:51:09.178547Z",
                "description": null,
                "id": 1,
                "modified_at": "2019-11-24T20:51:09.178578Z",
                "name": "TCC II",
                "program": 1,
                "teacher": 1
            }
        ]
